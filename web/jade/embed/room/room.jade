extends ../layout.jade

block title
  title #{roomTitle}

block append scripts
  script(type='text/javascript').
        var nickName = '';
        var posX;
        var socket;
        var currentTime;
        var playerStatusGot = "";
        var playerStatusSetted;
        var socketInterval;
        var duration;
        var percentVideo;

        function send(message) {
        if (!window.WebSocket) {
        return;
        }
        if (socket.readyState == WebSocket.OPEN) {
        socket.send(message);
        } else {
        alert("The socket is not open.");
        }
        }
        function Play() {
        send(JSON.stringify({
        'playStatus': 'PLAY'
        }));
        }
        function Pause() {
        send(JSON.stringify({
        'playStatus': 'PAUSE'
        }));
        }
        function Seeked(seconds) {
        send(JSON.stringify({
        'time': seconds
        }));
        }
        function Buffering() {
        send(JSON.stringify({
        'playStatus': 'PAUSE'
        }));
        }
        function sendMessage(text) {
        send(JSON.stringify(
        {'message': text
        }));
        }
        function sendNickname(nickName) {
        send(JSON.stringify(
        {'nickName': nickName
        }));
        }
        function sendPong() {
        send(JSON.stringify(
        {'utils': 'pong'
        }));
        }

  script.
        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
        height: '100%',
        width: '100%',
        videoId: '#{videoId}',
        playerVars: { 'controls': 0, 'rel': 0, 'disablekb': 1, 'fs': 0, 'showinfo': 0},
        events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
        }
        });
        }
        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
        if (!window.WebSocket) {
                  window.WebSocket = window.MozWebSocket;
                  }
                  if (window.WebSocket) {
                  socket = new WebSocket("ws://" + window.location.host + "/websocket" + window.location.pathname.replace("/embed", ""));
                  socket.onmessage = function (event) {
                  var parsed = JSON.parse(event.data);
                  if (parsed.playStatus == "PLAY") {
                  playerPlay();
                  } else if (parsed.playStatus == "PAUSE") {
                  playerPause();
                  } else if (parsed.time) {
                  if (parsed.time == currentTime) {} else {
                  playerSeeked(parsed.time);
                  }
                  } else if (parsed.countUsers) {
                  document.getElementById('watchers').innerHTML = parsed.countUsers;
                  }
                  else if(parsed.nickName){
                    document.getElementById('play_messageGet').play();
                    document.getElementById('messages').innerHTML = document.getElementById('messages').innerHTML + "<p><span>" + parsed.nickName + "</span>: " + parsed.text + "</p>";
                  }
                  else if(parsed.utils == "ping"){
                    sendPong();
                  }
                  };
                  socket.onclose = function (event) {
                  socket = new WebSocket("ws://" + window.location.host + "/websocket" + window.location.pathname);
                  };
                  } else {
                  alert("Your browser does not support Web Socket.");
                  }
        duration = player.getDuration();
        document.getElementById('duration').innerHTML = fromSeconds(duration);
        percentVideo = duration / 100;
        document.getElementsByClassName('timeBar')[2].style.width = player.getVolume() + '%';
        setInterval(requestBufferingTime, 100);
        }
        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING) {
        document.getElementsByClassName('play')[0].style.display = 'none';
        document.getElementsByClassName('pause')[0].style.display = 'block';
        if(playerStatusGot == ""){
        Play();
        }
        else{
        playerStatusGot = "";
        }
        }
        if(event.data == YT.PlayerState.PAUSED){
        document.getElementsByClassName('pause')[0].style.display = 'none';
        document.getElementsByClassName('play')[0].style.display = 'block';
        if(playerStatusGot == ""){
        Pause();
        }
        else{
        playerStatusGot = "";
        }
        }
        if(event.data == YT.PlayerState.BUFFERING){
        Pause();
        playerStatusGot = "";
        }
        }
        function playerPlay(){
        playerStatusGot = "Play";
        player.playVideo();
        }
        function playerPause(){
        if(player.getPlayerState() !== 3){
        playerStatusGot = "Pause";
        player.pauseVideo();
        }
        }
        function playerSeeked(seconds){
        player.seekTo(seconds);
        document.getElementsByClassName('timeBar')[0].style.width = seconds / percentVideo + '%'
        }
        function playerBuffering(){
        playerStatusGot = "Buffering";
        player.pauseVideo();
        }
        function fromSeconds(secs) {
        var sec_num = parseInt(secs, 10); // don't forget the second param
        var hours   = Math.floor(sec_num / 3600);
        var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
        var seconds = sec_num - (hours * 3600) - (minutes * 60);
        if (hours   < 10) {hours   = "0"+hours;}
        if (minutes < 10) {minutes = "0"+minutes;}
        if (seconds < 10) {seconds = "0"+seconds;}
        if(hours == 0){
        var time = minutes+':'+seconds;
        }else{
        var time = hours+':'+minutes+':'+seconds;
        }
        return time;
        }
block content
  .video
    #player
  include ../../modules/elements.jade
block addons
  script.
    var leftProgress = document.getElementsByClassName('progressBar')[0].getBoundingClientRect().left;
    var widthProgress = document.getElementsByClassName('progressBar')[0].getBoundingClientRect().width;
    var percentProgress = widthProgress / 100;
    var leftVolume = document.getElementsByClassName('progressBar')[1].getBoundingClientRect().left;
    var widthVolume = document.getElementsByClassName('progressBar')[1].getBoundingClientRect().width;
    var percentVolume = widthVolume / 100;
    window.onresize = function(event) {
    leftProgress = document.getElementsByClassName('progressBar')[0].getBoundingClientRect().left;
    widthProgress = document.getElementsByClassName('progressBar')[0].getBoundingClientRect().width;
    percentProgress = widthProgress / 100;
    leftVolume = document.getElementsByClassName('progressBar')[1].getBoundingClientRect().left;
    widthVolume = document.getElementsByClassName('progressBar')[1].getBoundingClientRect().width;
    percentVolume = widthVolume / 100;
    };
    var mousedownProgress = 0;
    var mousedownVolume = 0;
    document.body.addEventListener('mousemove', (function(e) {
    e = e || window.event;
    posX = e.pageX;
    if(mousedownProgress == 1){
    var positionProgress = posX - leftProgress;
    if(posX < 0){
    positionProgress = 0;
    }
    if(posX > widthProgress + leftProgress){
    positionProgress = widthProgress;
    }
    document.getElementsByClassName('timeBar')[1].style.width = positionProgress / percentProgress + '%';
    }
    if(mousedownVolume == 1){
    var positionVolume = posX - leftVolume;
    if(posX < 0){
    positionVolume = 0;
    }
    if(posX > widthVolume + leftVolume){
    positionVolume = widthVolume;
    }
    player.setVolume(positionVolume / percentVolume);
    document.getElementsByClassName('timeBar')[2].style.width = positionVolume / percentVolume + '%';
    }
    }
    ))
    document.getElementsByClassName('progressBar')[0].addEventListener('mousedown', (function(e) {
    mousedownProgress = 1;
    document.body.onselectstart = function(){
    return false;
    }
    document.getElementsByClassName('timeBar')[0].style.display = 'none';
    document.getElementsByClassName('timeBar')[1].style.display = 'block';
    document.body.addEventListener('mouseup', (function scrollDrag(e) {
    mousedownProgress = 0;
    var positionProgress = posX - leftProgress;
    if(posX < 0){
    positionProgress = 0;
    }
    if(posX > widthProgress + leftProgress){
    positionProgress = widthProgress;
    }
    document.getElementsByClassName('timeBar')[1].style.width = positionProgress / percentProgress + '%';
    Seeked(positionProgress / percentProgress * percentVideo);
    playerSeeked(positionProgress / percentProgress * percentVideo);
    document.getElementsByClassName('timeBar')[0].style.display = 'block';
    document.getElementsByClassName('timeBar')[1].style.display = 'none';
    document.body.removeEventListener('mouseup', scrollDrag);
    }
    ))
    }
    ))
    document.getElementsByClassName('progressBar')[1].addEventListener('mousedown', (function(e) {
    mousedownVolume = 1;
    document.body.onselectstart = function(){
    return false;
    }
    document.body.addEventListener('mouseup', (function scrollDragVolume(e) {
    mousedownVolume = 0;
    var positionVolume = posX - leftVolume;
    if(posX < 0){
    positionVolume = 0;
    }
    if(posX > widthVolume + leftVolume){
    positionVolume = widthVolume;
    }
    document.getElementsByClassName('timeBar')[2].style.width = positionVolume / percentVolume + '%';
    player.setVolume(positionVolume / percentVolume);
    document.body.removeEventListener('mouseup', scrollDragVolume);
    }
    ))
    }
    ))
    function requestBufferingTime(){
    var currentTime = player.getCurrentTime();
    document.getElementById('currentTime').innerHTML = fromSeconds(currentTime);
    document.getElementsByClassName('bufferBar')[0].style.width = player.getVideoLoadedFraction() * 100 + '%';
    document.getElementsByClassName('timeBar')[0].style.width = currentTime / percentVideo + '%';
    }
    document.getElementsByClassName('play')[0].addEventListener('click', function() {
    player.playVideo();
    })
    document.getElementsByClassName('pause')[0].addEventListener('click', (function() {
    player.pauseVideo();
    }))
    document.getElementsByClassName('fullscreen')[0].addEventListener("click", function() {
    var element = document.getElementsByClassName('videoplayer')[0];
    if(element.requestFullscreen) {
    element.requestFullscreen();
    } else if(element.mozRequestFullScreen) {
    element.mozRequestFullScreen();
    } else if(element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen();
    } else if(element.msRequestFullscreen) {
    element.msRequestFullscreen();
    }
    })
    document.getElementsByClassName('fullscreenExit')[0].addEventListener("click", function() {
    if(document.exitFullscreen) {
    document.exitFullscreen();
    } else if(document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
    } else if(document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
    } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
    }
    })
    function startFullScreen(){
    document.getElementsByClassName('fullscreen')[0].style.display = 'none';
    document.getElementsByClassName('fullscreenExit')[0].style.display = 'block';
    document.getElementsByClassName('videoplayer')[0].style.border = 'none';
    document.getElementsByClassName('col-lg-8 col-xs-12 col-lg-height col-md-height videoplayer')[0].className = 'col-lg-12 col-xs-12 videoplayer';
    document.getElementsByClassName('embed-responsive embed-responsive-16by9')[0].className = 'fullScreenPlayer';
    }
    function exitFullScreen(){
    document.getElementsByClassName('fullscreen')[0].style.display = 'block';
    document.getElementsByClassName('fullscreenExit')[0].style.display = 'none';
    document.getElementsByClassName('col-lg-12 col-xs-12 videoplayer')[0].className = 'col-lg-8 col-xs-12 col-lg-height col-md-height videoplayer';
    //document.getElementsByClassName('videoplayer')[0].style.border = '1px solid #e7e7e7';
    document.getElementsByClassName('fullScreenPlayer')[0].className = 'embed-responsive embed-responsive-16by9';
    }
    document.addEventListener("fullscreenchange", function() {
    if(document.fullscreenElement){
    startFullScreen();
    } else{
    exitFullScreen();
    }
    });
    document.addEventListener("mozfullscreenchange", function() {
    if(document.mozFullScreenElement){
    startFullScreen();
    } else{
    exitFullScreen();
    }
    });
    document.addEventListener("webkitfullscreenchange", function() {
    if(document.webkitFullscreenElement){
    startFullScreen();
    } else{
    exitFullScreen();
    }
    });
    document.addEventListener("msfullscreenchange", function() {
    if(document.msFullscreenElement){
    startFullScreen();
    } else{
    exitFullScreen();
    }});